@mixin paginate($n /* number of columns */, $wrap: true, $scroll-full-page: true) {
  $B: &; // Store the block class

  &__slide {width: 100% / $n}

  &__dot {
    @if $scroll-full-page { // Show only one dot per page
      display: none; // Hide all dots

      &:last-of-type, // The last page, the leftmost slide for all other pages (below)
      &:nth-of-type(#{$n}n-#{$n - 1}):not(:nth-last-of-type(-n+#{$n})) {
        --debug: "Show only dots for canonical slides (full-page)";
        display: inline-block;
      }
    } @else { // Hide dots for non left-most slides on last page
      &:nth-last-of-type(-n+#{$n - 1}) {
        --debug: "Show only dots for canonical slides (single-step)";
        display: none;
      }
    }
  }

  // Right arrow to last page
  // FIXME Do not show on last slides of 3rd last page in case last and 2nd last page overlap
  > input[type="radio"]:checked:nth-last-of-type(n+#{$n + 1}):nth-last-of-type(-n+#{$n * 2}) {
    ~ #{$B}__arrows--right #{$B}__arrow:last-child,
    ~ #{$B}__arrow-wrapper #{$B}__arrows--right #{$B}__arrow:last-child {
      --debug: "Right arrow to last page (full-page)";
      display: block;
    }
  }

  // For all possible checked radios
  // Loop indices are 0-based, :nth-x selectors are 1-based, take care
  @for $i from 0 to $css-slider-max-slides {
    > input[type="radio"]:nth-of-type(#{$i + 1}):checked {
      @if $wrap {
        // Left arrow on first page, goes to last slide
        @if $scroll-full-page {
          &:nth-of-type(-n+#{$n}) {
            ~ #{$B}__arrows--left #{$B}__arrow:last-child,
            ~ #{$B}__arrow-wrapper #{$B}__arrows--left #{$B}__arrow:last-child {
              --debug: "Left arrow on first page for wrap (full page)";
              display: block;
            }
          }
        } @else {
          &:first-of-type {
            ~ #{$B}__arrows--left #{$B}__arrow:last-child,
            ~ #{$B}__arrow-wrapper #{$B}__arrows--left #{$B}__arrow:last-child {
              --debug: "Left arrow on first page for wrap (single-step)";
              display: block;
            }
          }
        }

        // Right arrow on last page, goes to first slide
        &:nth-last-of-type(-n+#{$n}) {
          ~ #{$B}__arrows--right #{$B}__arrow:first-child,
          ~ #{$B}__arrow-wrapper #{$B}__arrows--right #{$B}__arrow:first-child {
            --debug: "Right arrow on last page for wrap";
            display: block;
          }
        }
      }

      @if $scroll-full-page and $n > 1 {
        // Left arrow on standard pages
        @if $i >= $n {
          ~ #{$B}__arrows--left #{$B}__arrow:nth-of-type(#{($i - $i % $n) - $n + 1}),
          ~ #{$B}__arrow-wrapper #{$B}__arrows--left #{$B}__arrow:nth-of-type(#{($i - $i % $n) - $n + 1}) {
            --debug: "Left arrow on standard page (full-page)";
            display: block;
          }
        }

        // Right arrow on standard pages
        ~ #{$B}__arrows--right #{$B}__arrow:nth-of-type(#{($i - $i % $n) + $n + 1}),
        ~ #{$B}__arrow-wrapper #{$B}__arrows--right #{$B}__arrow:nth-of-type(#{($i - $i % $n) + $n + 1}) {
          &:not(:nth-last-of-type(-n+#{$n})) {
            --debug: "Right arrow on standard page (full-page)";
            display: block;
          }
        }

        // Current dot
        &:not(:nth-last-of-type(-n+#{$n})) ~ #{$B}__dots > #{$B}__dot:nth-of-type(#{$i - $i % $n + 1})::before,
        &:nth-last-of-type(-n+#{$n}) ~ #{$B}__dots > #{$B}__dot:last-of-type::before {
          --debug: "Current dot (full-page)";
          opacity: 1;
        }

        // Slide the slides
        // For radios on all pages except the last
        &:not(:nth-last-of-type(-n+#{$n})) {
          // Slide left by full page-widths
          ~ #{$B}__slides #{$B}__slide {
            --debug: "Non-last page #{$i}";
            transform: translate3d(($i - $i % $n) * -100%, 0, 0);
          }
        }

      } @else { // Scroll by only one item
        // Left arrow
        @if $i > 0 {
          &:not(:nth-last-of-type(-n+#{$n})) {
            ~ #{$B}__arrows--left #{$B}__arrow:nth-of-type(#{$i}),
            ~ #{$B}__arrow-wrapper #{$B}__arrows--left #{$B}__arrow:nth-of-type(#{$i}) {
              --debug: "Left arrow on non-last page (single-step)";
              display: block;
            }
          }

          &:nth-last-of-type(-n+#{$n}) {
            ~ #{$B}__arrows--left #{$B}__arrow:nth-last-of-type(#{$n + 1}),
            ~ #{$B}__arrow-wrapper #{$B}__arrows--left #{$B}__arrow:nth-last-of-type(#{$n + 1}) {
              --debug: "Left arrow on last page (single-step)";
              display: block;
            }
          }
        }

        // Right arrow
        &:not(:nth-last-of-type(-n+#{$n})) ~ #{$B}__arrows--right #{$B}__arrow:nth-of-type(#{$i + 2}),
        &:not(:nth-last-of-type(-n+#{$n})) ~ #{$B}__arrow-wrapper #{$B}__arrows--right #{$B}__arrow:nth-of-type(#{$i + 2}) {
          --debug: "Right arrow (single-step)";
          display: block;
        }

        // Current dot
        &:not(:nth-last-of-type(-n+#{$n})) {
          ~ #{$B}__dots #{$B}__dot:nth-of-type(#{$i + 1 })::before {
            --debug: "Current dot on non-last page (single-step)";
            opacity: 1;
          }
        }

        &:nth-last-of-type(-n+#{$n}) {
          ~ #{$B}__dots #{$B}__dot:nth-last-of-type(#{$n})::before {
            --debug: "Current dot on last page (single-step)";
            opacity: 1;
          }
        }

        // Slide the slides
        &:not(:nth-last-of-type(-n+#{$n})) {
          ~ #{$B}__slides #{$B}__slide {
            --debug: "Single-step";
            transform: translate3d($i * -100%, 0, 0);
          }
        }
      }

      // Show last page for any of the last n radios
      @for $j from 0 to $n { // Nested loop! Keep this short
        &:nth-last-of-type(#{$n - $j}) {
          // Slide to the last page
          ~ #{$B}__slides #{$B}__slide {
            // Slide #{$i - $j} is always the left-most slide on the last page
            --debug: "Last page (slide #{$i}, #{$j} last)";
            transform: translate3d(($i - $j) * -100%, 0, 0);
          }
        }
      }
    }
  }
}
